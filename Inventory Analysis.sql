/********* TOY STORE INVENTORY MANAGEMENT  **************/


CREATE DATABASE TOY_INVENTORY;

USE TOY_INVENTORY;

-- load all tables to this database


SELECT * from INVENTORY;

SELECT * FROM PRODUCTS;

SELECT * FROM STORES;

SELECT * FROM SALES;

/**** STORES TABLE  *********/

SELECT * FROM STORES;

SELECT TABLE_NAME,COLUMN_NAME,DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME='STORES';

--changing data type of store_id to int

ALTER TABLE STORES
ALTER COLUMN STORE_ID INT;


--Updating data type of store_open_date to date


UPDATE STORES SET STORE_OPEN_DATE= CONVERT(date,STORE_OPEN_DATE,103);

ALTER TABLE STORES
ALTER COLUMN STORE_OPEN_DATE DATE;


/**** INVENTORY TABLE  *********/

SELECT * FROM INVENTORY;

SELECT TABLE_NAME,COLUMN_NAME,DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME='INVENTORY';

--(all correct data types)


/**** SALES TABLE  *********/

SELECT * FROM SALES;

SELECT TABLE_NAME,COLUMN_NAME,DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME='SALES';

ALTER TABLE SALES
ALTER COLUMN "Date" DATE;


/**** PRODUCTS TABLE  *********/

SELECT * FROM PRODUCTS;

SELECT TABLE_NAME,COLUMN_NAME,DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME='PRODUCTS';

--need to change data type of product cost and product price

ALTER TABLE PRODUCTS
ALTER COLUMN PRODUCT_COST MONEY;
ALTER TABLE PRODUCTS
ALTER COLUMN PRODUCT_COST FLOAT;

ALTER TABLE PRODUCTS
ALTER COLUMN PRODUCT_PRICE MONEY;
ALTER TABLE PRODUCTS
ALTER COLUMN PRODUCT_PRICE FLOAT;


/**** CALENDER TABLE  *********/

SELECT * FROM CALENDAR;

SELECT TABLE_NAME,COLUMN_NAME,DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME='CALENDAR';





--1. Top performing products based on total sales and profit

SELECT * FROM SALES;

SELECT * FROM PRODUCTS;

ALTER TABLE PRODUCTS 
ADD PROFIT FLOAT;

UPDATE PRODUCTS SET PROFIT=PRODUCT_PRICE-PRODUCT_COST;



/********* 1 ***************/

-- Top performing products based on total profit earned


CREATE VIEW PRODUCT_DET
AS
SELECT T1.PRODUCT_ID,T1.PRODUCT_NAME,T1.PRODUCT_PRICE,T1.PROFIT,SUM(T2.UNITS) AS 'Total Units sold'
from PRODUCTS T1
INNER JOIN SALES T2
ON T1.PRODUCT_ID=T2.PRODUCT_ID
GROUP BY T1.PRODUCT_ID,T1.PRODUCT_NAME,T1.PRODUCT_PRICE,T1.PROFIT;

SELECT * FROM PRODUCT_DET
ORDER BY PROFIT*[Total Units sold] DESC;

SELECT * FROM PRODUCT_DET
ORDER BY PRODUCT_PRICE*[Total Units sold] DESC;


-- Top performing products based on total sales (other way)

CREATE PROCEDURE TOP_BY_SALES
AS
BEGIN
SELECT T1.PRODUCT_ID,T1.PRODUCT_NAME,T1.PRODUCT_CATEGORY,T1.PRODUCT_PRICE,T1.PROFIT,SUM(T2.UNITS) AS 'Total Units sold'
from PRODUCTS T1
INNER JOIN SALES T2
ON T1.PRODUCT_ID=T2.PRODUCT_ID
GROUP BY T1.PRODUCT_ID,T1.PRODUCT_NAME,T1.PRODUCT_CATEGORY,T1.PRODUCT_PRICE,T1.PROFIT
ORDER BY PRODUCT_PRICE*SUM(T2.UNITS) DESC
END;

TOP_BY_SALES;






/************************* 2 ********************************/

--Sales performance of each store,including total revenue,profit margin

SELECT * FROM STORES;

SELECT * FROM PRODUCTS;

SELECT * FROM SALES;


--creating a table to track product wise sales of each store


CREATE VIEW STORE_PRODUCTS
AS
SELECT T1.STORE_ID,T1.PRODUCT_ID,T1."Date" AS 'SALES_DATE',UNITS,PRODUCT_COST,PRODUCT_PRICE,PROFIT,
UNITS*PRODUCT_PRICE AS 'TOTAL_SALES',
UNITS*PROFIT AS 'TOTAL_PROFIT'
FROM SALES T1
LEFT JOIN PRODUCTS T2
ON T1.PRODUCT_ID=T2.PRODUCT_ID;

SELECT * FROM STORE_PRODUCTS
ORDER BY SALES_DATE;




--each store total revenue and profit margin

SELECT T1.STORE_ID,T1.STORE_NAME,SUM(TOTAL_SALES) AS 'TOTAL REVENUE',SUM(TOTAL_PROFIT) AS 'PROFIT MARGIN'
FROM STORES T1
INNER JOIN STORE_PRODUCTS T2
ON T1.STORE_ID=T2.STORE_ID
GROUP BY T1.STORE_ID,T1.STORE_NAME
ORDER BY STORE_ID;




/******************* 3 ****************************/

/***monthly trend analysis****/

SELECT * FROM STORE_PRODUCTS;


-- Date wise total sales

CREATE VIEW DATE_WISE
AS
(SELECT SALES_DATE,SUM(TOTAL_SALES) AS 'TOTAL_SALES_EACH_DAY' FROM STORE_PRODUCTS
GROUP BY SALES_DATE);

SELECT * FROM DATE_WISE
ORDER BY SALES_DATE;


-- MONTH wise total sales and 3 month rolling average of sales

CREATE VIEW MONTHLY_TREND_3
AS
WITH MONTH_SALES1 AS
(SELECT YEAR(SALES_DATE) AS 'SALES_YEAR',MONTH(SALES_DATE) AS 'SALES_MONTH',SUM(TOTAL_SALES_EACH_DAY) AS 'TOTAL_MONTHLY_SALES',
YEAR(SALES_DATE)*12+MONTH(SALES_DATE) AS 'YEARMONTH'
FROM DATE_WISE
GROUP BY MONTH(SALES_DATE),YEAR(SALES_DATE),YEAR(SALES_DATE)*12+MONTH(SALES_DATE)),
MONTH_SALES2 AS(
SELECT SALES_YEAR,SALES_MONTH,YEARMONTH,TOTAL_MONTHLY_SALES,AVG(TOTAL_MONTHLY_SALES) OVER(ORDER BY YEARMONTH ROWS BETWEEN
2 PRECEDING AND CURRENT ROW) AS '3 MONTH AVG' FROM MONTH_SALES1)
SELECT * FROM MONTH_SALES2;

SELECT * FROM MONTHLY_TREND_3;

--TREND ANALYSIS

SELECT SALES_YEAR,SALES_MONTH,TOTAL_MONTHLY_SALES,[3 MONTH AVG],CASE WHEN ([TOTAL_MONTHLY_SALES]-[3 MONTH AVG])>0 THEN '+1'
ELSE '-1'
END AS [TREND]
FROM MONTHLY_TREND_3;




/************************* 4 *********************************/


/****4. Cumulative distribution of profit margin for each product category, consider where products are having profit***/


--Saving totals data for products to a VIEW 

CREATE VIEW PRODUCT_TOTALS
AS
SELECT T1.PRODUCT_ID,T1.PRODUCT_NAME,T1.PRODUCT_CATEGORY,T1.PRODUCT_PRICE,T1.PROFIT,SUM(T2.UNITS) AS 'TOTAL_UNITS'
from PRODUCTS T1
INNER JOIN SALES T2
ON T1.PRODUCT_ID=T2.PRODUCT_ID
GROUP BY T1.PRODUCT_ID,T1.PRODUCT_NAME,T1.PRODUCT_CATEGORY,T1.PRODUCT_PRICE,T1.PROFIT;

SELECT * FROM PRODUCT_TOTALS;


--category wise total revenue and profit margin

SELECT PRODUCT_CATEGORY,SUM(PRODUCT_PRICE*TOTAL_UNITS) AS 'TOTAL_REVENUE_CATEGORY_WISE' ,
SUM(PROFIT*TOTAL_UNITS) AS 'TOTAL_PROFIT_CATEGORY_WISE',
ROUND(SUM(PROFIT*TOTAL_UNITS)/SUM(PRODUCT_PRICE*TOTAL_UNITS)*100,2) AS 'PROFIT_MARGIN_CATEGORY_WISE'
FROM PRODUCT_TOTALS
GROUP BY PRODUCT_CATEGORY;




/**********************  5 ********************************/

/**5. STORE INVENTORY TURNOVER ANALYSIS************/



SELECT * FROM STORE_PRODUCTS;
SELECT * FROM INVENTORY;

CREATE VIEW INV_TURNOVER
AS
WITH STORE_UNITS AS
(SELECT STORE_ID,PRODUCT_ID,SUM(UNITS) AS 'UNITS SOLD'
FROM STORE_PRODUCTS
GROUP BY STORE_ID,PRODUCT_ID),
STORE_UNITS1 AS
(SELECT T1.STORE_ID,T1.PRODUCT_ID,STOCK_ON_HAND,[UNITS SOLD]
FROM INVENTORY AS T1
INNER JOIN STORE_UNITS AS T2
ON T1.Store_ID=T2.STORE_ID AND T1.PRODUCT_ID=T2.PRODUCT_ID)
SELECT STORE_ID,PRODUCT_ID,STOCK_ON_HAND,[UNITS SOLD],ISNULL([UNITS SOLD]*1.0/NULLIF(STOCK_ON_HAND,0),0) AS 'ITR'
FROM STORE_UNITS1;

SELECT STORE_ID,PRODUCT_ID,Stock_On_Hand,[UNITS SOLD],CAST(ITR AS DECIMAL(10,2)) AS 'ITR' FROM INV_TURNOVER;




